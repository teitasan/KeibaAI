---
description:
globs:
alwaysApply: false
---
# バージョン管理規則

## バージョン管理対象

以下のファイルは必ずGitによるバージョン管理を行います：

1. **ソースコード**
   - すべての`.py`ファイル
   - テストコード（`tests/`ディレクトリ）
   - ユーティリティスクリプト（`scripts/`ディレクトリ）

2. **設定ファイル**
   - `requirements.txt`
   - `setup.py`
   - `pyproject.toml`
   - CI/CD設定ファイル（`.github/`ディレクトリ）
   - `.gitignore`

3. **ドキュメント**
   - `README.md`
   - `CODING_STANDARDS.md`
   - `docs/`ディレクトリ内のすべてのドキュメント
   - APIドキュメント
   - モデルの仕様書

4. **モデル定義**
   - モデルのアーキテクチャ定義ファイル
   - ハイパーパラメータ設定ファイル
   - 評価指標の定義ファイル

## バージョン管理対象外（.gitignore）

```
# 環境変数
.env
.env.*

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# 仮想環境
venv/
ENV/
env/

# データファイル
data/*.csv
data/*.json
data/*.pkl
*.model
models/trained/*

# ログ
logs/
*.log

# IDE
.idea/
.vscode/
*.swp
*.swo
.DS_Store
```

## コミットメッセージ規則

コミットメッセージは以下の形式に従います：

```
<type>: <description>

[optional body]

[optional footer]
```

typeは以下のいずれかを使用：
- feat: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの動作に影響しない変更（フォーマット等）
- refactor: リファクタリング
- test: テストコードの追加・修正
- chore: ビルドプロセスやツールの変更

## バージョニング規則

セマンティックバージョニングを採用：`MAJOR.MINOR.PATCH`

- MAJOR: 後方互換性のない変更
- MINOR: 後方互換性のある機能追加
- PATCH: 後方互換性のあるバグ修正

## ブランチ戦略

- main: プロダクション環境用
- develop: 開発用メインブランチ
- feature/*: 新機能開発用
- bugfix/*: バグ修正用
- release/*: リリース準備用
- hotfix/*: 緊急バグ修正用

## リリースプロセス

1. バージョン番号の更新
2. CHANGELOGの更新
3. リリースノートの作成
4. タグの作成
5. mainブランチへのマージ
